#include <iostream>
#include <stdlib.h>
#include <vector>
#include <string.h>
#include <algorithm>
using namespace std;
class Clone
{
public:
    Clone(){};
    virtual Clone *clone() = 0;
    virtual ~Clone(){};
};
class AutoGeneratedId
{
protected:
    static int nextID;
    int id;
public:
    AutoGeneratedId() : id(nextID++){}
    int getID() { return id; }
    virtual ~AutoGeneratedId() {}
};
class Interfata{
public:
    // virtualizarea citirii
    virtual istream& citire (istream& in) = 0;
    virtual ostream& afisare (ostream& out) const = 0;
};
class CNPEXCEPTION:public exception{
    const char* what(){
        return "CNP invalid";
    }
};

class specException: public exception {
    const char* what (){
        return "Date invalide";
    }
};

class Manager:public Interfata,public AutoGeneratedId,virtual public Clone{
protected:
char* nume;
char* prenume;
string CNP;

public:
//constructorul cu toti parametrii
Manager (char* Nume, char* Prenume, string CNP);

Manager ();

Manager (const Manager& pers);
istream& citire(istream& in) ;
ostream& afisare (ostream& out ) const;

Manager& operator = (const Manager& M);

friend istream& operator >> (istream& in, Manager& M);
friend ostream& operator << (ostream& out, const Manager& M);
Clone *clone() ;
~Manager();
};

Manager& Manager::operator = (const Manager& M){
    if (this != &M){
        if (this->nume != NULL)
            delete []this->nume;
        if (this->prenume != NULL)
            delete []this->prenume;
        this->nume = new char[100];
        this->prenume= new char[100];
        strcpy(this->nume, M.nume);
        strcpy(this->prenume, M.prenume);
        this->CNP = M.CNP;
    }
    return *this;
}
istream& Manager::citire(istream &in){
    cout << "\nIntroduceti numele persoanei: ";
    char aux[100];
    in >> aux;
    this->nume = new char [strlen(aux)+1];
    strcpy (this->nume, aux);
    cout << "\nIntroduceti prenumele persoanei: ";
    in >> aux;
    this->prenume = new char [strlen(aux)+1];
    strcpy(this->prenume, aux);
    while (this->CNP ==""){
        cout << "\nIntroduceti CNP-ul persoanei: ";
        in >> this->CNP;
        try{
            if (this->CNP.length() != 13)
                throw CNPEXCEPTION();
        }
        catch (exception& e){
            cout << e.what() << endl;
            cout << "CNP-ul are 13 cifre\n";
            this->CNP = "";
        }
    }

    return in;

}
ostream& Manager::afisare (ostream& out ) const{
    out << "Numele si prenumele persoanei: ";
    out << this->nume << " " << this->prenume<<endl;
    out << "Manager este nascuta pe data de ";
    out << "Are CNP-ul " << this->CNP << endl;
    return out;
}
Manager::Manager (char* Nume, char* Prenume, string CNP){
    this->nume = new char [strlen(Nume)+1];
    strcpy(this->nume, Nume);
    this->prenume = new char [strlen(Prenume)+1];
    strcpy(this->prenume, Prenume);
    this->CNP = CNP;
}
Manager::Manager (const Manager& M){
    this->nume = new char [strlen(M.nume)+1];
    strcpy(this->nume, M.nume);
    prenume = new char [strlen(M.prenume)+1];
    strcpy(this->prenume, M.prenume);
    this->CNP = M.CNP;
}

istream& operator >> (istream& in, Manager& M){
    return M.citire(in);
}
ostream& operator << (ostream& out, const Manager& M){
    return M.afisare(out);
}
Manager::Manager(){
    this->nume = new char;
    this->prenume = new char;
    this->CNP = "";
}
Clone *Manager::clone()
{
    return new Manager(*this);
}

class Magazin: virtual public Clone
{
protected:
    static Manager X;
public:
    Magazin ( ) { };
    virtual ~Magazin( ) = 0;
    Magazin ( const Magazin& );

    virtual void citire( istream& in ) = 0;
    friend istream& operator >>( istream&, Magazin& );
    virtual void afisare( ostream& out ) = 0;
    friend ostream& operator <<( ostream&, Magazin& );

    static void set_manager( );
    static Manager& get_manager ( );

    Magazin& operator = ( Magazin& M);
    Clone *clone() ;

};

Manager Magazin::X;
Magazin::~Magazin(){};
Magazin::Magazin( const Magazin& m){}

Magazin& Magazin::operator = (Magazin& m)
{
    return *this;
}

istream& operator >> ( istream& in, Magazin& m )
{
    m.citire( in );
    return in;
}

ostream& operator << ( ostream& out, Magazin& m)
{
    m.afisare( out );
    return out;
}


void Magazin::set_manager() {
    cin>>X;
}
Manager& Magazin::get_manager() {
    return X;
}

class Magazin_fizic: public Magazin,virtual public Clone
{
private:
    string denumire;
    int nr_angajati;
    double* profituri;

public:
    Magazin_fizic( );
    Magazin_fizic( string, int, double* );
    Magazin_fizic( const Magazin_fizic& );
    ~Magazin_fizic( );

    Magazin_fizic& operator = ( const Magazin_fizic& );

    void set_denumire( string denumire );
    string get_denumire ( ) const;
    void set_nr_angajati( int nrAngajati );
    int get_nr_angajati ( ) const;
    void set_profituri( double* p );
    double* get_profituri ( ) const;

    void citire( istream& in );
    friend istream& operator >> ( istream& in, Magazin_fizic& mf );
    void afisare( ostream& out );
    friend ostream& operator << ( ostream& out, Magazin_fizic& mf);
    Clone *clone() override;
};


Magazin_fizic::Magazin_fizic():Magazin()
{
    this-> denumire = "";
    this-> nr_angajati = 0;
    profituri = new double[12];
    for ( int i = 0; i < 12; i++ )
        this-> profituri[i] = 0;
}

Magazin_fizic::Magazin_fizic( string denumire, int nr_angajati, double p[12] ) : Magazin( )
{
    //cout << "Constructor parametrizat Magazin_fizic \n";
    this-> denumire = denumire;
    this-> nr_angajati = nr_angajati;
    profituri = new double[12];
    for ( int i = 0; i < 12; i++ )
        this-> profituri[i] = p[i];
}

Magazin_fizic::Magazin_fizic( const Magazin_fizic& mf )
{
    this-> denumire = mf.denumire;
    this-> nr_angajati = mf.nr_angajati;
    profituri = new double[12];
    for ( int i = 0; i < 12; i++ )
        this-> profituri[i] = mf.profituri[i];
}

Magazin_fizic::~Magazin_fizic( )
{
    delete[] profituri;
}

Magazin_fizic& Magazin_fizic::operator = ( const Magazin_fizic& mf )
{
    this-> denumire = mf.denumire;
    this-> nr_angajati = mf.nr_angajati;
    profituri = new double[12];
    for ( int i = 0; i < 12; i++ )
        this->profituri[i] = mf.profituri[i];
    return *this;
}

void Magazin_fizic::set_denumire( string denumire )
{
    this-> denumire = denumire;
}

string Magazin_fizic::get_denumire( ) const
{
    return this-> denumire;
}

void Magazin_fizic::set_nr_angajati( int nr_angajati )
{
    this-> nr_angajati = nr_angajati;
}

int Magazin_fizic::get_nr_angajati( ) const
{
    return this-> nr_angajati;
}

void Magazin_fizic::set_profituri( double* p )
{
    for ( int i = 0; i < 12; i++ )
        this-> profituri[i] = p[i];
}

double* Magazin_fizic::get_profituri( ) const
{
    return this-> profituri;
}

void Magazin_fizic::citire( istream& in )
{
    cout << "Dati datele magazinului fizic: \n";

    cout << "Denumirea: ";
    in >> this-> denumire;

    cout << "Numarul de angajati: ";
    in >> this-> nr_angajati;
    while ( nr_angajati < 0 )
    {
        cout << "Numarul angajatilor trebuie sa fie pozitiv. Dati o valoare valida. -> ";
        in >> this-> nr_angajati;
    }

    cout << "Profiturile lunare(pentru fiecare dintre cele 12 luni ale anului):" << endl;
    cout << "prima valoare - luna ianuarie, a douasprezecea valoare - luna decembrie: " << endl;
    for (int i = 0; i < 12; i++)
    {
        cout << "Luna " << i + 1 << ": ";
        in >> this-> profituri[i];
    }
}

istream& operator >> ( istream& in, Magazin_fizic& mf )
{
    mf.citire( in );
    return in;
}

void Magazin_fizic::afisare( ostream& out )
{
    out << endl << "Datele salvate pentru Magacia fizica sunt: ";
    out << endl << "Denumire: " << denumire;
    out << endl << "Numar de angajati: " << nr_angajati;
    out << endl << "Profiturile pe fiecare luna (ianuarie -> decembrie): ";
    for ( int i = 0; i < 12; i++ )
        out << this-> profituri[i] << " ";
}

ostream& operator << ( ostream& out, Magazin_fizic& mf )
{
    mf.afisare( out );
    return out;
}

Clone *Magazin_fizic::clone()
{
    return new Magazin_fizic(*this);
}

class Magazin_online : public Magazin,virtual public Clone
{
private:
    string adresa_web;
    int nr_vizitatori;
    double discount;

public:
    Magazin_online();
    Magazin_online( string, int, double );
    Magazin_online( const Magazin_online& );
    ~Magazin_online( );

    Magazin_online& operator = ( const Magazin_online& );
    Clone *clone() override;
    void set_adresa_web( string );
    string get_adresa_web( ) const ;
    void set_nr_vizitatori( int );
    int get_nr_vizitatori( ) const;
    void set_discount( double );
    double get_discount( ) const;

    void citire( istream& in );
    friend istream& operator >> ( istream& in, Magazin_online& mo );
    void afisare( ostream& out );
    friend ostream& operator << ( ostream& out, Magazin_online& mo );


    operator Magazin_fizic( )
    {
        double* p = new double[12];
        for ( int i = 0; i < 12; i++ )  p[i] = 0;
        Magazin_fizic* mf = new Magazin_fizic( this-> adresa_web + " ONLINE", 0, p );
        delete[] p;
        return *mf;
    }

};
Magazin_online::Magazin_online():Magazin()
{
    this-> adresa_web= "";
    this-> nr_vizitatori = 0;
    this->discount=0;
}

Magazin_online::Magazin_online( string adresa_web , int nr_vizitatori , double discount ) : Magazin( )
{
    this-> adresa_web = adresa_web;
    this-> nr_vizitatori = nr_vizitatori;
    this-> discount = discount;
}


Magazin_online::Magazin_online( const Magazin_online& mo)
{
    this-> adresa_web = mo.adresa_web;
    this-> nr_vizitatori = mo.nr_vizitatori;
    this-> discount = mo.discount;
}

Magazin_online::~Magazin_online( ){}


Magazin_online& Magazin_online::operator = ( const Magazin_online& mo )
{
    this-> adresa_web = mo.adresa_web;
    this-> nr_vizitatori = mo.nr_vizitatori;
    this-> discount = mo.discount;
    return *this;
}

void Magazin_online::set_adresa_web( string adresa_web )
{
    this-> adresa_web = adresa_web;
}

string Magazin_online::get_adresa_web( ) const
{
    return this-> adresa_web;
}

void Magazin_online::set_nr_vizitatori( int nr_vizitatori )
{
    this-> nr_vizitatori = nr_vizitatori;
}

int Magazin_online::get_nr_vizitatori( ) const
{
    return this-> nr_vizitatori;
}

void Magazin_online::set_discount( double discount )
{
    this-> discount = discount;
}

double Magazin_online::get_discount( ) const
{
    return this-> discount;
}

void Magazin_online::citire( istream& in )
{
    cout << "Dati datele magazinului online: \n";

    cout << "Adresa web: ";
    in >> this-> adresa_web;

    cout << "Numarul de vizitatori: ";
    in >> this-> nr_vizitatori;
    while ( nr_vizitatori < 0 )
    {
        cout << "Numarul de vizitatori trebuie sa fie pozitiv. Dati o valoare valida. -> ";
        in >> this-> nr_vizitatori;
    }

    cout << "Discountul utilizat (0-100): ";
    in >> this-> discount;
    while ( discount < 0 || discount > 100 )
    {
        if ( discount < 0 )
        {
            cout << "Discountul trebuie sa fie pozitiv. Dati o valoare valida. -> ";
            in >> this-> discount;
        }
        if ( discount > 100 )
        {
            cout << "Discountul trebuie sa fie maxim 100. Dati o valoare valida. -> ";
            in >> this-> discount;
        }
    }
}

istream& operator >> ( istream& in, Magazin_online& mo )
{
    mo.citire( in );
    return in;
}

void Magazin_online::afisare( ostream& out )
{
    out << endl << "Datele salvate pentru magazinul online sunt: ";
    out << endl << "Adresa web: " << adresa_web;
    out << endl << "Numarul de vizitatori: " << nr_vizitatori;
    out << endl << "Discountul utilizat: " << discount << " " << endl;
}

ostream& operator << ( ostream& out, Magazin_online& mo)
{
    mo.afisare( out );
    return out;
}
Clone *Magazin_online::clone()
{
    return new Magazin_online(*this);
}

template <class t>
class Gestionare_Magazine
{
private:
    vector<int> index_magazin;
    const int id_lant = rand()%99 + 1;
    vector<t> magazine;
public:
    Gestionare_Magazine( ){};
    Gestionare_Magazine( const Gestionare_Magazine<t>& gm );
    ~Gestionare_Magazine( )
    {
        //cout << "Destructor template" << endl;
    }

    int get_index( int i ) const { return index_magazin[i]; }

    int get_id_lant( ) const { return id_lant; }

    void citire( istream& in );
    void afisare( ostream& out );
    friend istream& operator >> ( istream& in, Gestionare_Magazine<t>& gm )
    {
        gm.citire( in );
        return in;
    };
    friend ostream& operator << ( ostream& out, Gestionare_Magazine<t>& gm )
    {
        gm.afisare( out );
        return out;
    }

    Gestionare_Magazine& operator = ( const Gestionare_Magazine& gm );
    Gestionare_Magazine<t> operator += ( Magazin_online Mag )
    {
        if ( index_magazin.empty() == 1 ) index_magazin.push_back(1);
        else index_magazin.push_back(index_magazin.back()+1);
        magazine.push_back((Magazin_fizic)Mag);
        return *this;
    }

    void adauga_magazin( t& magazin )
    {
        if ( index_magazin.empty() == 1 ) index_magazin.push_back(1);
        else index_magazin.push_back(index_magazin.back()+1);
        magazine.push_back(magazin);
    }

};

template <class t>
Gestionare_Magazine<t>::Gestionare_Magazine( const Gestionare_Magazine<t>& gm )
{
    index_magazin.resize( gm.index_magazin.size() );
    for ( int i = 0; i < gm.index_magazin.size(); i++ )
        this-> index_magazin[i] = gm.index_magazin[i];

    magazine.resize( gm.magazine.size() );
    for ( int i = 0; i < gm.magazine.size(); i++ )
        this-> magazine[i] = gm.magazine[i];
}

template <class t>
void Gestionare_Magazine<t>::citire( istream& in )
{
    cout << "Introduceti numarul de magazine din gestiune: ";
    int nr;
    cin >> nr;

    cout << endl << "Doriti sa cititi managerul magazinului ?" << endl << "1. Da" << endl << "0. Nu" << endl;
    int opt;
    cin >> opt;
    while ( opt != 0 && opt != 1 )
    {
        cout << "Introduceti o optiune valida (1 sau 0). -> ";
        cin >> opt;
    }
    if (opt == 1 )
    {
        cout << endl;
        Magazin::set_manager();
    }
    cout << endl;


    for (int i = 0; i < nr; i++)
    {
        t aux;
        cout << endl;
        cin >> aux;
        adauga_magazin( aux );
    }
}

template <class t>
void Gestionare_Magazine<t>::afisare( ostream& out )
{
    out << endl << endl << "In gestiune exista urmatoarele  " << magazine.size( ) << " magazine, cu id-ul lantului " << id_lant << ": " << endl << endl;

    for ( int i = 0; i < magazine.size(); i++ )
    {
        out << "Magazinul cu indexul " << index_magazin[i] << ": ";
        out << magazine[i] << endl;
        out << endl;
    }

}

template <class t>
Gestionare_Magazine<t>& Gestionare_Magazine<t>::operator = ( const Gestionare_Magazine<t>& gm )
{
    for ( int i = 0; i < gm.index_magazin.size (); i++ )
        this-> index_magazin.push_back( gm.index_magazin[i] );
    for ( int i = 0; i < gm.magazine.size(); i++ )
        this-> magazine.push_back( gm.magazine[i] );
}



template <> class Gestionare_Magazine <Magazin_online>
{
private:
    int vizitatori;
public:
    Gestionare_Magazine( )
    {
        vizitatori = 0;
    }
    Gestionare_Magazine( const Gestionare_Magazine<Magazin_online>& gm );
    ~Gestionare_Magazine( )
    {}

    void set_vizitatori( int vizitatori ) { this-> vizitatori = vizitatori; }
    int get_vizitatori( ) const { return vizitatori; }

    void citire( istream& in );
    void afisare( ostream& out );
    friend istream& operator >> ( istream& in, Gestionare_Magazine<Magazin_online>& gm )
    {
        gm.citire( in );
        return in;
    };
    friend ostream& operator << ( ostream& out, Gestionare_Magazine<Magazin_online>& gm )
    {
        gm.afisare( out );
        return out;
    }

    Gestionare_Magazine& operator = ( const Gestionare_Magazine& gm );
    Gestionare_Magazine<Magazin_online> operator += ( Magazin_online magazin )
    {
        vizitatori = vizitatori + magazin.get_nr_vizitatori();
        return *this;
    }

    void adauga_magazin( Magazin_online& magazin )
    {
        vizitatori += magazin.get_nr_vizitatori( );
    }

};

Gestionare_Magazine<Magazin_online>::Gestionare_Magazine( const Gestionare_Magazine<Magazin_online>& gm )
{
    this-> vizitatori = gm.vizitatori;
}

void Gestionare_Magazine<Magazin_online>::citire( istream& in )
{
    cout << "Introduceti numarul de magazine din gestiune: ";
    int nr;
    cin >> nr;

    cout << endl << "Doriti sa cititi proprietarul magazini?" << endl << "1. Da" << endl << "0. Nu" << endl;
    int opt;
    cin >> opt;
    while ( opt != 0 && opt != 1 )
    {
        cout << "Introduceti o optiune valida (1 sau 0). -> ";
        cin >> opt;
    }
    if (opt == 1 )
    {
        cout << endl;
        Magazin::set_manager();
    }
    cout << endl;

    for ( int i = 0; i < nr; i++ )
    {

        Magazin_online aux;
        cin >> aux;
        cout << endl;

        vizitatori += aux.get_nr_vizitatori();
    }
}

void Gestionare_Magazine<Magazin_online>::afisare( ostream& out )
{
    out << "Numarul total de vizitatori ai magazinelor online legate de aceasta gestiune: " << endl;
    out << vizitatori << endl;

}

Gestionare_Magazine<Magazin_online>& Gestionare_Magazine<Magazin_online>::operator = ( const Gestionare_Magazine<Magazin_online>& gm )
{

    this-> vizitatori = gm.vizitatori;
    return *this;
}



void tip( Magazin*& M, int& i )
{
    string s;
    cout << "\n";
    cout << "Introduceti tipul magazinului " << i + 1 << " ('fizica' sau 'online'): ";
    cin >> s;
    transform( s.begin(), s.end(), s.begin(), ::tolower );
        try {
                if ( s == "fizic" )
                {
                    M = new Magazin_fizic;
                    cin >> *M;
                    i++;
                }
                else if ( s == "online" )
                {   M = new Magazin_online;
                    cin >> *M;
                     i++;
                }
        else
            throw specException();
    }

    catch ( exception& e )
    {
        cout << "Se introduc date de tipul fizic/online!TRY AGAIN\n" << e.what();
        exit( EXIT_FAILURE );
    }

}


void meniu( )
{
    cout << "CIMPEANU ANA MARIA - TEMA 3 - Aplicatie care sa permita gestionarea " << endl << "activitatii unor magazine apartinând managerului X \n\n\n";
    int optiune = 1;
    int n = 0;
    Magazin** M;
    while ( optiune )
    {
        cout << "MENIU:\n\n";
        cout << "1. Citeste informatii despre magazine fizice si online (upcast & late binding)\n";
        cout << "2. Contorizare magazine - dynamic_cast (downcast)\n";
        cout << "3. Template Gestionare_Magazine - clasa Magazin_fizic\n";
        cout << "4. Template Gestionare_Magazine - clasa Magazin_online\n";
        cout << "0. Iesire.";
        cout << "\n";

        cout << "\nIntroduceti numarul actiunii: ";
        cin >> optiune;

        switch ( optiune )
        {
            case 1:  //1. informatii despre magazine fizice si online (upcast & late binding)

                {

                    cout << "Introduceti numarul de obiecte citite: ";
                    cin >> n;
                    while ( n < 1 )
                    {
                        cout << "Numarul introdus trebuie sa fie strict pozitiv.Introduceti o valoare valida. -> ";
                        cin >> n;
                    }

                    cout << endl << "Doriti sa cititi proprietarul magazinului?" << endl << "1. Da" << endl << "0. Nu" << endl;
                    int opt;
                    cin >> opt;
                    while ( opt != 0 && opt != 1 )
                    {
                        cout << "Introduceti o optiune valida (1 sau 0). -> ";
                        cin >> opt;
                    }
                    if (opt == 1 )
                    {
                        cout << endl;
                        Magazin::set_manager();
                    }
                    cout << endl;

                    M = new Magazin * [n];
                    for ( int i = 0; i < n; )
                        tip( M[i], i );

                    cout << "\n\nAfisarea magazinelor citite anterior:\n";
                    for ( int i = 0; i < n; i++ )
                    {
                        cout << "\nMagazin " << i + 1 << ": " << endl;
                        cout << "-------";
                        cout << *M[i] << endl;
                    }
                    cout << endl;
                    Manager aux = Magazin::get_manager();

                }

            case 2:
            {
                int nrmf, nrmo;
                nrmo = 0;
                nrmf = 0;
                if (n <= 0)
                {
                    cout << "Nu s-a citit niciun tip de magazin. Cititi cel putin o magazin (optiunea 1).";
                }
                if (n > 0)
                {
                    for (int i = 0; i < n; i++)
                    {
                        Magazin_fizic mf;
                        Magazin_online* mo = dynamic_cast <Magazin_online*> ( M[i] );
                        if ( typeid(mf) == typeid(*M[i]) ) nrmf++;
                        if ( mo ) nrmo++;

                    }
                    cout << "Numarul de magazine fizice: " << nrmo << "\n";
                    cout << "Numarul de magazine online: " << nrmf<< "\n";
                }
                break;
            }

            case 3:
            {
                Gestionare_Magazine <Magazin_fizic> mf;
                cin >> mf;
                cout << mf;
                break;
            }

            case 4:
            {
                Gestionare_Magazine <Magazin_online> mo;
                cin >> mo;
                cout << mo;
                break;
            }

            case 0:
            {
                break;
            }

            default:
            {
                cout << "\nSelectia este incorecta. Introduceti un numar din lista data.\n";
                break;
            }
        }
        cout << "\n\n";
    }
}


int main()
{
    meniu();
    return 0;
}
